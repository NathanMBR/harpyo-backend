{
    // Place your harpyo-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Add environment variable": {
        "description": "Adds an environment variable",
        "prefix": "env",
        "scope": "typescript",
        "body": [
            "export const $1 = $2(process.env.$1);$0"
        ]
    },
    "Create repository contract": {
        "description": "Creates a repository contract",
        "prefix": "ctrc",
        "scope": "typescript",
        "body": [
            "export namespace $TM_FILENAME_BASE {",
            "    export interface Request {",
            "        $1",
            "    }",
            "",
            "    export interface Response {",
            "        $2",
            "    }",
            "}",
            "",
            "export interface $TM_FILENAME_BASE {",
            "    $3: (data: $TM_FILENAME_BASE.Request) => Promise<$TM_FILENAME_BASE.Response>;",
            "}$0"
        ]
    },
    "Create repository": {
        "description": "Creates a repository",
        "prefix": "repo",
        "scope": "typescript",
        "body": [
            "import { $2 } from \"@/repositories/$1\";",
            "import { prisma } from \"@/database/prisma\";",
            "",
            "export class $TM_FILENAME_BASE implements $2 {",
            "    async $3(data: $2.Request) {",
            "        $0",
            "    }",
            "}"
        ]
    },
    "Create resource": {
        "description": "Creates a resource",
        "prefix": "rsc",
        "scope": "typescript",
        "body": [
            "import { z as zod } from \"zod\";",
            "",
            "import { $1 } from \"./schemas\";",
            "import {",
            "    $3",
            "} from \"@/repositories/$2\";",
            "import { $5 } from \"@/errors\";",
            "",
            "type $6 = zod.infer<typeof $1>;",
            "",
            "export class $TM_FILENAME_BASE {",
            "    constructor(",
            "        $4",
            "    ) { }",
            "",
            "    async execute(dto: $6) {",
            "        $0",
            "    }",
            "}"
        ]
    },
    "Create controller": {
        "description": "Creates a controller",
        "prefix": "ctrl",
        "scope": "typescript",
        "body": [
            "import {",
            "    Request,",
            "    Response",
            "} from \"express\";",
            "",
            "import { GenericControllerContract } from \"../contracts\";",
            "import { $2 } from \"@/resources/$1\";",
            "import {",
            "    $4",
            "} from \"@/repositories/$3\";",
            "import { controllerErrorHandler } from \"@/handlers\";",
            "",
            "export class $TM_FILENAME_BASE implements GenericControllerContract {",
            "    $5",
            "",
            "    async handle(request: Request, response: Response) {",
            "        try {",
            "            $0",
            "        } catch (error) {",
            "            return controllerErrorHandler(response, error);",
            "        }",
            "    }",
            "}"
        ]
    },
    "Create route": {
        "description": "Creates a route",
        "prefix": "rtr",
        "scope": "typescript",
        "body": [
            "import { Router } from \"express\";",
            "",
            "import {",
            "    $2",
            "} from \"@/controllers/$1\";",
            "",
            "const $3 = Router();",
            "",
            "$3.post(",
            "    \"$4\",",
            "    new $2().handle",
            ");",
            "",
            "export { $3 };"
        ]
    },
}